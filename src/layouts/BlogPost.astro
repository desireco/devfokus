---
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import ContentNavigation from "@/components/navigation/ContentNavigation.astro";
import ShareButtons from "@/components/ShareButtons.astro";
import TagFilter from "@/components/TagFilter.astro";
import { SITE_TITLE } from "@/consts";
import { getAdjacentContent } from "@/lib/navigation";
import FormattedDate from "../components/FormattedDate.astro";
import { ImageViewer } from "../components/image-viewer";
import "../styles/article.css";
import MainLayout from "./MainLayout.astro";

type Props = CollectionEntry<"blogs">["data"] & { id: string };

const {
  id,
  title,
  description,
  pubDate,
  updatedDate,
  tags = [],
  author,
} = Astro.props;

const origin = Astro.url.origin;
const content = await Astro.slots.render("default");

// Get navigation data
const allBlogs = await getCollection("blogs");
const adjacentContent = getAdjacentContent(allBlogs, id);
---

<MainLayout
  title={`${title} | ${SITE_TITLE}`}
  description={description}
  type="article"
  author={author}
  publishedTime={pubDate.toISOString()}
  modifiedTime={updatedDate?.toISOString()}
  section="Blog"
  tags={tags}
  keywords={tags.join(", ")}
>
  <article class="container px-4 md:px-6 prose-teahouse">
    <div class="max-w-screen-lg mx-auto p-4">
      <div class="mb-4 py-4 text-center leading-none">
        <h1 class="mb-2 font-serif">{title}</h1>
        <div class="date mb-2 text-gray-500">
          <FormattedDate date={pubDate} />
          {
            updatedDate && (
              <div class="last-updated-on italic mb-4">
                Last updated on <FormattedDate date={updatedDate} />
              </div>
            )
          }
        </div>
        {author && <div class="text-gray-500">{author}</div>}
      </div>
      <div
        class="md:flex md:justify-between md:items-center block space-y-4 md:space-y-0"
      >
        {
          tags && tags.length > 0 && (
            <TagFilter
              tags={tags.map((tag) => ({ tag, size: 1 }))}
              type="blogs"
              usedFor="detail"
            />
          )
        }
        <div class="flex items-center gap-2 lg:justify-end">
          <ShareButtons
            url={`${origin}/blogs/${id}`}
            title={title}
            description={description}
          />
        </div>
      </div>
      <hr />
    </div>
    <div class="max-w-screen-lg mx-auto p-4 text-lg">
      <Fragment set:html={content} />
    </div>
    <div class="max-w-screen-lg mx-auto p-4">
      <ContentNavigation
        adjacentContent={adjacentContent}
        contentType="blogs"
      />
    </div>
  </article>
  <ImageViewer selector="article img" client:load />
</MainLayout>
