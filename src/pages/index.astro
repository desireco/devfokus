---
import { getCollection } from "astro:content";
import CategoryCard from "@/components/category/CategoryCard.astro";
import HeroSection from "@/components/landing-page/HeroSection.astro";
import LatestSection from "@/components/landing-page/LatestSection.astro";
import TopicCard from "@/components/topic/TopicCard.astro";
import { SITE_DESCRIPTION, SITE_TITLE } from "@/consts";
import MainLayout from "@/layouts/MainLayout.astro";

const allCategories = (await getCollection("categories"))
  .map((category) => ({
    id: category.id,
    title: category.data.title,
    description: category.data.description,
    slug: category.data.slug,
    icon: category.data.icon,
    color: category.data.color,
    featured: category.data.featured,
    order: category.data.order,
    targetAudience: category.data.targetAudience,
    relatedCategories: category.data.relatedCategories,
    featuredTopics: category.data.featuredTopics,
    publishDate: category.data.publishDate,
    updatedDate: category.data.updatedDate,
  }))
  .sort((a, b) => (a.order || 999) - (b.order || 999));

const allTopics = (await getCollection("topics"))
  .map((topic) => ({
    id: topic.id,
    title: topic.data.title,
    description: topic.data.description,
    publishDate: topic.data.publishDate,
    updatedDate: topic.data.updatedDate,
    excerpt: topic.data.excerpt,
    difficulty: topic.data.difficulty,
    difficultyLevel: topic.data.difficultyLevel,
    targetAudience: topic.data.targetAudience,
    prerequisites: topic.data.prerequisites,
    estimatedReadingTime: topic.data.estimatedReadingTime,
    readTime: topic.data.readTime,
    image: topic.data.image,
    icon: topic.data.icon,
    color: topic.data.color,
    featured: topic.data.featured,
    author: topic.data.author,
    tags: topic.data.tags,
    category: topic.data.category,
    relatedTopics: topic.data.relatedTopics,
    relatedPosts: topic.data.relatedPosts,
    relatedCategories: topic.data.relatedCategories,
  }))
  .sort(
    (a, b) =>
      new Date(b.publishDate).valueOf() - new Date(a.publishDate).valueOf(),
  );

const allTags = [
  ...allCategories.flatMap((category) => category.targetAudience || []),
  ...allTopics.flatMap((topic) => topic.tags || []),
];
const uniqueTags = [...new Set(allTags)];

const featuredCategories = allCategories
  .filter((category) => category.featured)
  .slice(0, 6);
const featuredTopics = allTopics.filter((topic) => topic.featured).slice(0, 6);
---

<MainLayout
    title={`Home | ${SITE_TITLE}`}
    description={SITE_DESCRIPTION}
    className="w-full p-0"
>
    <HeroSection uniqueTags={uniqueTags} />

    <div class="px-4 md:px-6">
        <LatestSection
            title="Featured Categories"
            accentColor="text-emerald-400"
            description="Explore our curated learning paths and organized content categories."
            viewAllHref="/categories"
            viewAllText="View All Categories"
            viewAllButtonWidth="180px"
        >
            {featuredCategories.map((category) => <CategoryCard category={category} />)}
        </LatestSection>

        <LatestSection
            title="Featured Topics"
            accentColor="text-blue-400"
            description="Dive deep into our most popular and comprehensive learning topics."
            viewAllHref="/topics"
            viewAllText="View All Topics"
            viewAllButtonWidth="155px"
        >
            {featuredTopics.map((topic) => <TopicCard topic={topic} />)}
        </LatestSection>
    </div>
</MainLayout>
